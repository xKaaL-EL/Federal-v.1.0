package Exploit.org;

import java.util.Scanner;


public class Bank {

    //Private variables.---------------
    private String name;

    public Bank(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    private final Scanner takeInput = new Scanner(System.in);

//-----------------------------------------------------------------------

//Function that fires add new customer function, passing 2 params required for validation.---------------

    private void addCustomerToBranch(Branch branch) {
        System.out.println("Guidelines:- ");
        System.out.println("\t A customer can't open or hold 2 accounts of same type.\n");
        System.out.println("Fill all required details correctly:- ");

        String ssn = branch.getSsnFromUser();
        String accountType = branch.getAccountTypeFromUser();
        boolean flag = branch.addNewCustomer(ssn, accountType);

        if (!flag) {
            System.out.println("The customer already holds a " + accountType + " account!");
        }
    }
//------------------------------------------------------------------------------------------------------

//Function that fires modify customer function, passing params required for validation.------------------

    private void modifyCustomerInfo(Branch branch) {
        String accountNumber = branch.getAccountNumberFromUser();
        boolean flag = branch.modifyCustomerInformation(accountNumber);

        if (!flag) {
            System.out.println("This customer is not registered yet!");
        } else {
            System.out.println("Changes saved to your account successfully.");
        }
    }
//-----------------------------------------------------------------------------------------------

//Function that fires remove customer function, passing params required for validation.------------------

    private void removeRegisteredCustomer(Branch branch) {
        String accountNumber = branch.getAccountNumberFromUser();
        boolean flag = branch.removeCustomerAccount(accountNumber);

        if (!flag) {
            System.out.println("This customer is not registered yet!");
        } else {
            System.out.println("Account has been removed successfully");
        }
    }
//------------------------------------------------------------------------------------------------

//Function that fires display customer-list function, passing params required for validation.------------------

    private void displayBranchCustomerList(Branch branch) {
        branch.displayCustomerList();
    }
//----------------------------------------------------------------------------------------

    //Function that fires display customer information function, passing params required for validation.----------
    private void displayCustomerInfo(Branch branch) {
        String accountNumber = branch.getAccountNumberFromUser();
        boolean flag = branch.displayCustomerInformation(accountNumber);

        if (!flag) {
            System.out.println("This customer is not registered yet!");
        }
    }
//-------------------------------------------------------------------------------------------

//Function that fires credit function, passing params required for validation.------------------

    private void creditToCustomerAccount(Branch branch) {
        String accountNumber = branch.getAccountNumberFromUser();
        double amount = branch.getAmountFromUser();
        boolean flag = branch.amountToBeCredited(accountNumber, amount, false);

        if (!flag) {
            System.out.println("Your Account Number is Invalid!");
        }
    }
//----------------------------------------------------------------------------------------------------------

    //Function that fires debit function, passing params required for validation.------------------
    private void debitFromCustomerAccount(Branch branch) {
        String accountNumber = branch.getAccountNumberFromUser();
        double amount = branch.getAmountFromUser();
        boolean flag = branch.amountToBeDebited(accountNumber, amount, false);
    }
//-------------------------------------------------------------------------------------------------------

//Function that fires account to account transfer function, passing params required for validation.------------------

    private void accountToAccountTransaction(Branch branch) {
        String payerAccountNumber = branch.getAccountNumberFromUser();
        System.out.println("Enter Recipient's Account Number:- ");
        String recipientAccountNumber = takeInput.nextLine();

        double amount = branch.getAmountFromUser();
        int flag = branch.transferAmountToRecipient(payerAccountNumber, recipientAccountNumber, amount);

        switch (flag) {
            case 1:
                System.out.println("Your Account Number is Invalid! Enter registered Account Number");
                break;
            case 2:
                System.out.println("Recipient's Account Number is Invalid! Enter registered Account Number");
            case 3:
                System.out.println("Transaction Declined!");
                break;
        }
    }
//---------------------------------------------------------------------------------------------------------------

    //Function that fires  customer transaction history function, passing params required for validation.------------------
    private void customerLastTransaction(Branch branch) {
        String accountNumber = branch.getAccountNumberFromUser();
        boolean flag = branch.displayLastTransactions(accountNumber);

        if (!flag) {
            System.out.println("This customer is not registered yet!");
        }
    }
//----------------------------------------------------------------------------------

//Function that fires display customer  balance function, passing params required for validation.------------------

    private void showCustomerCurrentBalance(Branch branch) {
        String accountNumber = branch.getAccountNumberFromUser();
        boolean flag = branch.showCurrentBalance(accountNumber);

        if (!flag) {
            System.out.println("This customer is not registered yet!");
        }
    }
//---------------------------------------------------------------------------------

//Print instruction for user.

    private static void printInstructions(Branch branch) {
        System.out.println("\nPress digit corresponding to function you want to perform:- ");
        System.out.println("\t 0 - To print choice options.");
        System.out.println("\t 1 - To add a new customer to " + branch.getName() + " branch.");
        System.out.println("\t 2 - To modify customer information of " + branch.getName() + " branch.");
        System.out.println("\t 3 - To remove a customer from " + branch.getName() + " branch.");
        System.out.println("\t 4 - To display customer-list of " + branch.getName() + " branch.");
        System.out.println("\t 5 - To display a customer-details of " + branch.getName() + " branch.");
        System.out.println("\t 6 - To deposit amount in customer's account of " + branch.getName() + " branch.");
        System.out.println("\t 7 - To withdraw amount from customer's account of  " + branch.getName() + " branch.");
        System.out.println("\t 8 - To perform account-to-account transaction in " + branch.getName() + " branch.");
        System.out.println("\t 9 - To display a customer's transaction history of " + branch.getName() + " branch.");
        System.out.println("\t 10 - To display current balance of a customer of " + branch.getName() + " branch.");
        System.out.println("\t 11 - To quit the application.");
    }
//----------------------------------------------------------------------------------------------------------------------

//Main and the only accessible function of bank that operates all the other private function available in bank.

    public void operatorFunction(Branch branch) {

        boolean flag = false;
        int choice;
        printInstructions(branch);

        while (!flag) {
            System.out.println("\nEnter your choice:- ");
            choice = takeInput.nextInt();
            takeInput.nextLine();

            switch (choice) {
                case 0:
                    printInstructions(branch);
                    break;
                case 1:
                    this.addCustomerToBranch(branch);
                    break;
                case 2:
                    this.modifyCustomerInfo(branch);
                    break;
                case 3:
                    this.removeRegisteredCustomer(branch);
                    break;
                case 4:
                    this.displayBranchCustomerList(branch);
                    break;
                case 5:
                    this.displayCustomerInfo(branch);
                    break;
                case 6:
                    this.creditToCustomerAccount(branch);
                    break;
                case 7:
                    this.debitFromCustomerAccount(branch);
                    break;
                case 8:
                    this.accountToAccountTransaction(branch);
                    break;
                case 9:
                    this.customerLastTransaction(branch);
                    break;
                case 10:
                    this.showCustomerCurrentBalance(branch);
                    break;
                default:
                    flag = true;
                    break;
            }
        }
    }
    //-----------------------------------------------------------------------------------------------------------------
}
