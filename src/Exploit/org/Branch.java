package Exploit.org;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Branch {

//Private variables.

    private final String name;
    private final ArrayList<Customer> customersList = new ArrayList<>();
//-------------------------------------------------------------------

    //Parametrized constructor.---------------------------------
    public Branch(String name) {
        this.name = name;
    }

    //Some getters.----------------------------------------
    public String getName() {
        return name;
    }

    public ArrayList<Customer> getCustomersList() {
        return customersList;
    }

//Functions of Branch class(DEPENDENCIES required for proper functioning)------------------------------

    //For taking user's input from console.--------------------------
    private final Scanner takeInput = new Scanner(System.in);

    //used as one of the parameter for creating Transaction history class.------------------------
    private String getDateAndTime() {
        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        Calendar cal = Calendar.getInstance();
        return dateFormat.format(cal.getTime());
    }

    //used as one of the parameter for adding new customers(generates 9 digit random account numbers).---------------------------
    private String generateAccountNumber() {

        long timeSeed = System.nanoTime(); // to get the current date time value.

        double randSeed = Math.random() * 1000; // random number generation.

        long midSeed = (long) (timeSeed * randSeed); // mixing up the time and rand number.
        //variable timeSeed will be unique.
        // variable rand will ensure no relation between the numbers
        String string = midSeed + "";
        return string.substring(0, 9);
    }

    //All the validator functions.------------------------------------------------------------------------------

    //Validating Social Security Numbers.-------------------------------------------------------------------
    private boolean isValidSsn(String ssn) {
        return Pattern.matches("^(?!000|666)[0-8][0-9]{2}-(?!00)[0-9]{2}-(?!0000)[0-9]{4}$", ssn);
    }

    // validating Gender types.--------------------------------------------------------------------------------
    private String correctGenderType() {
        while (true) {
            String genderType = this.takeInput.nextLine();
            if (genderType.equalsIgnoreCase("male") || genderType.equalsIgnoreCase("female")) {
                return genderType;
            } else {
                System.out.println("Please enter a valid gender type! (Male or Female)");
            }
        }
    }

    // validating input amount while opening of an account.---------------------------------------------------
    private double validateInitialAmount() {
        while (true) {
            boolean isNextInt = this.takeInput.hasNextInt();
            if (isNextInt) {
                double initialBalance = this.takeInput.nextInt();
                takeInput.nextLine();
                if (initialBalance >= 100) {
                    return initialBalance;
                } else {
                    System.out.println("Only amount more than or equal to 100$ can be deposited!");
                }
            } else {
                System.out.println("Invalid Input!");
                this.takeInput.nextLine();
            }
        }
    }

    //validating input amount while during transactions.---------------------------------------
    private double validateAmount() {
        while (true) {
            boolean isNextInt = this.takeInput.hasNextInt();
            if (isNextInt) {
                double initialBalance = this.takeInput.nextInt();
                takeInput.nextLine();
                return initialBalance;
            } else {
                System.out.println("Invalid Input!");
                this.takeInput.nextLine();
            }
        }
    }

    //Using Java-Regex to validate name.--------------------------------------------
    private String correctNamePattern() {
        while (true) {
            String name = this.takeInput.nextLine();
            String regx = "^[a-zA-Z\\s]+$";

            Pattern pattern = Pattern.compile(regx, Pattern.CASE_INSENSITIVE);
            Matcher match = pattern.matcher(name);

            if (match.find()) {
                return name;
            } else {
                System.out.println("Enter a valid name! (Use only letters and spaces)");
            }
        }
    }

    //Using Java-Regex to validate phone number.--------------------------------------------
    private String correctPhoneNumberPattern() {
        while (true) {

            String phoneNumber = this.takeInput.nextLine();
            Pattern pattern = Pattern.compile("^\\d{10}$");
            Matcher match = pattern.matcher(phoneNumber);

            if (match.matches()) {
                return phoneNumber;
            } else {
                System.out.println("Enter a valid Phone Number!");
            }
        }
    }

    /* Finding the index of a customer from saved customer-list of the branch using
    ssn and accountType(Used only for checking bank guidelines/conditions). */
    private int isPresentOnCustomerList(String ssn, String accType) {
        for (int i = 0; i < this.customersList.size(); i++) {
            Customer customer = this.customersList.get(i);
            if (customer.getAccountType().equalsIgnoreCase(accType) && customer.getSsn().equals(ssn)) {
                return i;
            }
        }
        return -1;
    }

    // Finding the index of a customer from saved customer-list of the branch using Account Numbers.
    private int isPresentOnCustomerList(String accNumber) {
        for (int i = 0; i < this.customersList.size(); i++) {
            Customer customer = this.customersList.get(i);
            if (customer.getAccountNumber().equals(accNumber)) {
                return i;
            }
        }
        return -1;
    }

//Some getters functions that receives input from console and calls validator functions for validations.------

    //for receiving ssn.
    public String getSsnFromUser() {
        System.out.println("Type your SSN number:- ");
        while (true) {
            String ssn = this.takeInput.nextLine();
            if (isValidSsn(ssn)) {
                return ssn;
            } else {
                System.out.println("Please enter a valid social security number!");
            }
        }
    }

    //for receiving account number.
    public String getAccountNumberFromUser() {
        System.out.println("Enter registered Account number:- ");
        return this.takeInput.nextLine();
    }

    //for receiving account type.
    public String getAccountTypeFromUser() {

        System.out.println("Enter Account Type (Saving or Current):- ");
        while (true) {
            String accountType = this.takeInput.nextLine();
            if (accountType.equalsIgnoreCase("saving") || accountType.equalsIgnoreCase("current")) {
                return accountType;
            } else {
                System.out.println("Enter a valid Account Type! (Saving or Current)");
            }
        }
    }

    //for receiving amount from user.
    public double getAmountFromUser() {
        System.out.println("Enter Amount:- ");
        return validateAmount();
    }
//---------------------------------------------------------------------------------------------------------------------

//Main functions/operations of the branch.----------------------------------

    //creating new customers and adding it to the arraylist.
    public boolean addNewCustomer(String ssn, String accountType) {

        int index = this.isPresentOnCustomerList(ssn, accountType);
        if (index >= 0) {
            return false;
        }

        System.out.println("Enter Customer's Name:- ");
        String name = this.correctNamePattern();

        System.out.println("Enter Sex:- ");
        String gender = this.correctGenderType();

        System.out.println("Enter Customer's Phone Number:- ");
        String phoneNumber = this.correctPhoneNumberPattern();

        System.out.println("Enter amount the customer wants to deposit.(at least 100$):- ");
        double initialBalance = validateInitialAmount();

        String accountNumber = generateAccountNumber();

        Customer newCustomer = new Customer(name, ssn, gender, phoneNumber, accountNumber, accountType, initialBalance);
        this.customersList.add(newCustomer);

        System.out.println("A new customer with account number " + accountNumber + " has been added successfully.\n");
        return true;

    }
// Modifying function starts here.

    //Main driver function.
    public boolean modifyCustomerInformation(String accountNumber) {

        int indexOfCustomer = this.isPresentOnCustomerList(accountNumber);
        if (indexOfCustomer < 0) {
            return false;
        }

        this.mainDisplayModificationOptions();
        Customer customer = this.customersList.get(indexOfCustomer);
        boolean flag = true;

        while (flag) {

            System.out.println("Enter your choice to modify account details of " + customer.getName() + ":-");
            int input = takeInput.nextInt();
            takeInput.nextLine();

            if (input == 1) {
                this.modifyName(indexOfCustomer);
                input = this.displayModificationOptions();
            }
            if (input == 2) {
                this.modifyPhoneNumber(indexOfCustomer);
                input = this.displayModificationOptions();
            }
            if (input == 3) {
                this.mainDisplayModificationOptions();
            }
            if (input >= 4) {
                flag = false;
            }
        }
        return true;
    }

    //for modification in name.
    private void modifyName(int index) {

        System.out.println("Enter the new name:- ");
        String name = correctNamePattern();
        Customer customer = this.customersList.get(index);

        if (customer.getName().equalsIgnoreCase(name)) {
            System.out.println("The name " + name + " is similar to previously saved name! Try different Names.\n");
        } else {
            customer.setName(name);
            System.out.println("Contact has been updated\n");
        }
    }

    //for modification in phone number.
    private void modifyPhoneNumber(int index) {

        System.out.println("Enter the new Phone Number:- ");
        String phoneNumber = correctPhoneNumberPattern();
        Customer customer = this.customersList.get(index);

        if (customer.getPhoneNumber().equals(phoneNumber)) {
            System.out.println("The Phone Number " + phoneNumber + " is similar to previously saved Phone Number! Try a different Phone Number.\n");
        } else {
            customer.setPhoneNumber(phoneNumber);
            System.out.println("Contact has been updated\n");
        }
    }

    //For displaying option for modification.
    private void mainDisplayModificationOptions() {
        System.out.println("\nPress '1' to modify Customer Name.");
        System.out.println("Press '2' to modify Customer Phone Number.\n");
    }

    //For displaying option for modification.
    private int displayModificationOptions() {
        System.out.println("For further modification press '3' or press '4' to exit customer's details modification menu:- ");
        return this.takeInput.nextInt();
    }
//--------------------------------------------------------------------------------------------------------------------

    //Function for removing customer from customer array-list. --------------------------------
    public boolean removeCustomerAccount(String accountNumber) {

        int indexOfCustomer = this.isPresentOnCustomerList(accountNumber);
        if (indexOfCustomer < 0) {
            return false;
        }

        this.customersList.remove(indexOfCustomer);
        return true;
    }

    //Display all registered customers of a branch.------------------------------------------
    public void displayCustomerList() {
        if (this.customersList.size() == 0) {
            System.out.println("No Customer details available for display!");
        } else {
            System.out.println(this.name + " branch has only " + this.customersList.size() + " registered customers.");

            for (int i = 0; i < this.customersList.size(); i++) {
                System.out.println((i + 1) + ". " + this.customersList.get(i).getName());
            }
        }
    }

    //Display a customer's information.----------------------------------------------------------------
    public boolean displayCustomerInformation(String accountNumber) {

        int indexOfCustomer = this.isPresentOnCustomerList(accountNumber);
        if (indexOfCustomer >= 0) {

            Customer customer = this.customersList.get(indexOfCustomer);
            System.out.println("\n Customer details:- ");
            System.out.println("\t Name:- " + customer.getName());
            System.out.println("\t Gender:- " + customer.getGender());
            System.out.println("\t SSN:- " + customer.getSsn());
            System.out.println("\t Phone Number:- " + customer.getPhoneNumber());
            System.out.println("\t Account Number:- " + customer.getAccountNumber());
            System.out.println("\t Account Type:- " + customer.getAccountType());
            System.out.println("\t Available Balance:- " + customer.getAvailableBalance());
            return true;

        } else return false;
    }
//-----------------------------------------------------------------------------------------------------------

    /* Function that can deposit amount in customer's account.
     (Also fires the transaction history constructor by passing all required params, and also
     saving created objects to transaction history array-list in customer objects.)*/
    public boolean amountToBeCredited(String accountNumber, double amount, boolean isAccToAccTransfer) {

        int indexOfCustomer = this.isPresentOnCustomerList(accountNumber);
        if (indexOfCustomer < 0) {
            return false;
        }

        Customer customer = this.customersList.get(indexOfCustomer);
        customer.addBalance(amount);
        if (!isAccToAccTransfer) {
            System.out.println("An amount of " + amount + "$" + " has been successfully credited to Account Number (" + customer.getAccountNumber()
                    + ")." + " Available balance:- " + customer.getAvailableBalance() + "$" + "\n");
            customer.getTransactionHistory().add(new TransactionHistory("credit", amount, this.getDateAndTime()));
        }
        return true;
    }
//-----------------------------------------------------------------------------------------------------------------------------------------------------

    /* Function that can withdraw amount from customer's account.
        (Also fires the transaction history constructor by passing all required params, and also
        saving created objects to transaction history array-list in customer objects.)*/
    public boolean amountToBeDebited(String accountNumber, double amount, boolean isAccToAccTransfer) {

        int indexOfCustomer = this.isPresentOnCustomerList(accountNumber);
        if (indexOfCustomer < 0) {
            System.out.println("Your Account Number is Invalid! \n");
            return false;
        }

        Customer customer = this.customersList.get(indexOfCustomer);
        if (customer.getAvailableBalance() < amount) {
            System.out.println("Balance is insufficient! Available balance:- " + customer.getAvailableBalance()
                    + "$");
            return false;
        }

        customer.deductBalance(amount);
        if (!isAccToAccTransfer) {
            System.out.println("An amount of " + amount + "$" + " has been debited from Account Number (" + customer.getAccountNumber()
                    + ")." + " Available balance:- " + customer.getAvailableBalance() + "$");
            customer.getTransactionHistory().add(new TransactionHistory("debit", amount, this.getDateAndTime()));
        }
        return true;
    }
//------------------------------------------------------------------------------------------------------------------------------------------------

    /* Function that can transfer amount.
    (Also fires the transaction history constructor by passing all required params, and also
    saving created objects to transaction history array-list in both the customer objects involved transaction.)*/
    public int transferAmountToRecipient(String payerAccountNumber, String recipientAccountNumber, double amount) {

        int indexOfPayer = this.isPresentOnCustomerList(payerAccountNumber);
        int indexOfRecipient = this.isPresentOnCustomerList(recipientAccountNumber);

        if (indexOfPayer < 0) return 1; //In Bank class 1 denotes payer account number is invalid.
        if (indexOfRecipient < 0) return 2; //In Bank class 2 denotes recipient account number is invalid.

        Customer payer = this.customersList.get(indexOfPayer);
        Customer recipient = this.customersList.get(indexOfRecipient);

        boolean returnedFlag = this.amountToBeDebited(payerAccountNumber, amount, true);
        if (!returnedFlag) return 3; //In Bank class 3 denotes Transaction declined due to insufficient balance.
        boolean flag = this.amountToBeCredited(recipientAccountNumber, amount, true);

        System.out.println("An amount of " + amount + "$ has been transferred from your Account (" + payerAccountNumber + ") to the Recipient's Account Number ("
                + recipientAccountNumber + ") successfully." + "Available balance:- " + payer.getAvailableBalance());

        //calling transaction history constructor.
        payer.getTransactionHistory().add(new TransactionHistory("debit", amount, this.getDateAndTime(), true, null, recipientAccountNumber));
        recipient.getTransactionHistory().add(new TransactionHistory("credit", amount, this.getDateAndTime(), true, payerAccountNumber, null));

        return 0;
    }
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    //for displaying the last transactions of a customer. -------------------------------------------
    public boolean displayLastTransactions(String accountNumber) {

        int indexOfCustomer = this.isPresentOnCustomerList(accountNumber);
        if (indexOfCustomer < 0) return false;

        Customer customer = this.customersList.get(indexOfCustomer);
        System.out.println("\nLast Transactions of " + customer.getName() + ":-");

        for (int i = (customer.getTransactionHistory().size() - 1); i >= 0; i--) {
            System.out.print((customer.getTransactionHistory().size() - i) + ". ");
            customer.getTransactionHistory().get(i).driverCode();
            System.out.println("\n");
        }
        return true;
    }

    //for displaying current balance of a customer.-------------------------------------------------------------
    public boolean showCurrentBalance(String accountNumber) {

        int indexOfCustomer = this.isPresentOnCustomerList(accountNumber);
        if (indexOfCustomer < 0) return false;

        Customer customer = this.customersList.get(indexOfCustomer);

        System.out.println("The current Balance on your account is:- " + customer.getAvailableBalance());
        return true;
    }
}
